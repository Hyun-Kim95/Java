메소드와 다형성:
  입력값에 따라 출력이 달리됨(overloading)

클래스와 다형성:
  A obj = new B(); 처럼 사용 가능 -> B를 참조하지만 A의 데이터타입을 가지고 있음
  -> A에 저장돼어 있는 데이터를 B의 형식으로 사용
  -> A에는 없고 B에만 있는 것은 사용불가

다형성 예제) org.opentutorials.javatutorials.abstractclass.example2.CalculatorDemo.java 의 변경

  package org.opentutorials.javatutorials.abstractclass.example2;   // 여기부터 무시
  abstract class Calculator{
      int left, right;
      public void setOprands(int left, int right){
          this.left = left;
          this.right = right;
      }
      int _sum() {
        return this.left + this.right;
      }
      public abstract void sum();  
      public abstract void avg();
      public void run(){
          sum();
          avg();
      }
  }
  class CalculatorDecoPlus extends Calculator {
      public void sum(){
          System.out.println("+ sum :"+_sum());
      }
      public void avg(){
          System.out.println("+ avg :"+_sum()/2);
      }
  } 
  class CalculatorDecoMinus extends Calculator {
      public void sum(){
          System.out.println("- sum :"+_sum());
      }
      public void avg(){
          System.out.println("- avg :"+_sum()/2);
      }
  }                                                               // 여기까지 무시
  public class CalculatorDemo {
      public static void execute(Calculator cal){     // 다형성으로 인해 이부분 추가 가능해짐
          System.out.println("실행결과");
          cal.run();
      }
      public static void main(String[] args) { 
          Calculator c1 = new CalculatorDecoPlus(); // 이렇게사용가능
          c1.setOprands(10, 20);

          Calculator c2 = new CalculatorDecoMinus();
          c2.setOprands(10, 20);
          
          execute(c1);
          execute(c2);
      }
  }

인터페이스와 다형성:
  I obj = new C();  // I: interface   C: class C implements I{}
  같은 인터페이스를 구현한 다른 클래스들에서 필요한 정보만 사용하도록 할 수 있음
  여러 인터페이스를 한 클래스에서 구현할때 필요한 정보만 사용하도록 할 수 있음
  D obj = new D();	  // A, B 둘 다 필요할때
  I2 objI2 = new D();	// A만 필요할때
  I3 objI3 = new D();	// B만 필요할때
